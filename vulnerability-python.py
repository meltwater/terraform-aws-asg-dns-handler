import os
import subprocess
import hashlib
import sqlite3
import pickle
from flask import Flask, request, jsonify

app = Flask(__name__)

# Vulnerable to SQL Injection
def vulnerable_sql_injection(user_input):
    conn = sqlite3.connect('example.db')
    cursor = conn.cursor()

    # 1. Insecure SQL Query with User Input
    query = "SELECT * FROM users WHERE username = '" + user_input + "'"
    cursor.execute(query)  # Vulnerable to SQL injection
    result = cursor.fetchall()
    conn.close()

    return result

# Insecure deserialization (Pickle vulnerability)
def vulnerable_deserialization(serialized_data):
    # 2. Insecure Deserialization using pickle (arbitrary code execution)
    deserialized_data = pickle.loads(serialized_data)  # Allows arbitrary code execution
    return deserialized_data

# Insecure file handling (Path traversal)
def vulnerable_file_access(user_input):
    # 3. Path Traversal vulnerability - allows access to arbitrary files on the server
    file_path = "uploads/" + user_input  # Unsanitized user input used in file path
    try:
        with open(file_path, 'r') as file:
            content = file.read()
        return content
    except Exception as e:
        return f"Error: {e}"

# Command injection vulnerability
def vulnerable_command_injection(user_input):
    # 4. Command Injection - Executes user input as a system command
    command = "ls " + user_input  # Directly inserts user input into system command
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    return result.stdout

# Weak password storage (Using MD5 for hashing)
def vulnerable_password_storage(password):
    # 5. Weak cryptography (MD5 is weak)
    hashed_password = hashlib.md5(password.encode()).hexdigest()  # MD5 is not secure for hashing
    return hashed_password

# Insecure cookie handling (no HttpOnly and Secure flags)
@app.route('/set_cookie')
def set_cookie():
    # 6. Insecure cookie (does not use HttpOnly or Secure flags)
    resp = jsonify(message="Setting insecure cookie")
    resp.set_cookie('session', 'random_session_value')
    return resp

# Broken authentication (hardcoded password)
@app.route('/login', methods=['POST'])
def login():
    # 7. Broken authentication - hardcoded credentials (this is insecure)
    username = request.form['username']
    password = request.form['password']
    
    # Hardcoded password
    if username == 'admin' and password == 'admin123':
        return jsonify(message="Logged in successfully!")
    else:
        return jsonify(message="Invalid credentials"), 403

# Open Redirect vulnerability
@app.route('/redirect')
def open_redirect():
    # 8. Open Redirect - redirects to a URL based on user input without validation
    target_url = request.args.get('url')
    return redirect(target_url)  # No check on the validity of the URL

if __name__ == "__main__":
    app.run(debug=True)