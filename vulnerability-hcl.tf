# Vulnerable Terraform Configuration for AWS
# Provider Configuration
provider "aws" {
  region     = "us-east-1"
  access_key = "AKIAEXAMPLEKEY"  # Hardcoded access key (critical vulnerability)
  secret_key = "SECRETKEYEXAMPLE12345"  # Hardcoded secret key (critical vulnerability)
}
# Insecure Security Group with excessive open ports and IP ranges
resource "aws_security_group" "insecure_sg" {
  name        = "insecure_sg"
  description = "Insecure security group open to all IPs"
  ingress {
    from_port   = 0
    to_port     = 65535
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # Open to all IPs (extremely insecure)
  }
  egress {
    from_port   = 0
    to_port     = 65535
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # Open to all IPs (insecure)
  }
}
# EC2 Instance with hardcoded sensitive data (password)
resource "aws_instance" "example_instance" {
  ami           = "ami-12345678"
  instance_type = "t2.micro"
  key_name = "my_key_pair"  # Should not use SSH key pairs hardcoded in configuration
  # Insecure Security Group referenced here
  security_group_ids = [aws_security_group.insecure_sg.id]
  # User Data with hardcoded sensitive information (password)
  user_data = <<-EOF
              #!/bin/bash
              echo "Setting up application"
              echo "mysecretpassword" > /home/ec2-user/password.txt  # Hardcoded password (critical vulnerability)
              EOF
}
# S3 Bucket with public read access (exposes data to the world)
resource "aws_s3_bucket" "insecure_bucket" {
  bucket = "my-insecure-bucket-12345"
  acl = "public-read"  # Bucket is publicly accessible (insecure)
}
# IAM Role with overly permissive policy
resource "aws_iam_role" "insecure_role" {
  name = "insecure-role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      },
    ]
  })
}
resource "aws_iam_policy" "insecure_policy" {
  name        = "insecure-policy"
  description = "Overly permissive policy"
  policy      = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "s3:*"
        Effect = "Allow"
        Resource = "arn:aws:s3:::*"
      },
      {
        Action = "ec2:*"
        Effect = "Allow"
        Resource = "*"
      },
      {
        Action = "iam:*"  # Overly permissive IAM permissions
        Effect = "Allow"
        Resource = "*"
      },
    ]
  })
}
resource "aws_iam_role_policy_attachment" "policy_attach" {
  role       = aws_iam_role.insecure_role.name
  policy_arn = aws_iam_policy.insecure_policy.arn
}
# AWS RDS Database with public accessibility and no encryption enabled
resource "aws_db_instance" "insecure_rds" {
  allocated_storage    = 20
  storage_type         = "gp2"
  engine               = "mysql"
  engine_version       = "5.7"
  instance_class       = "db.t2.micro"
  name                 = "insecuredb"
  username             = "admin"
  password             = "adminpassword"  # Hardcoded password (critical vulnerability)
  publicly_accessible  = true  # Database is publicly accessible (critical vulnerability)
  skip_final_snapshot  = true
  multi_az             = false
  storage_encrypted    = false  # No encryption enabled (critical vulnerability)
}
# AWS Lambda function with hardcoded secrets
resource "aws_lambda_function" "insecure_lambda" {
  function_name = "insecure-lambda"
  runtime       = "python3.8"
  role          = aws_iam_role.insecure_role.arn
  handler       = "lambda_function.lambda_handler"
  # Hardcoded sensitive data (API keys)
  environment {
    variables = {
      API_KEY = "abcdef1234567890"  # Hardcoded API key (critical vulnerability)
    }
  }
}